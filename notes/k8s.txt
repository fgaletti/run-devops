10. CREATE DOCKER

 -Rght click on the project -> create docker support


11 RIN DOCKER CONTAINER

  --

12 DOCKER COMMANDS LINE


 odcker images
 docker rmi dc 

 docker ps -> dockers running

 docker ps -a


 docker build -t shoppingapp .   -> . meands 

 docker run -d -p 8080:80 --name myapp shoppingclient

13 DOCKER REGISTRY

  create: https://hub.docker.com/repository/create?namespace=fgaletti

      -> shoppingapp

   docker push fgaletti/shoppingapp:tagname

docker push fgaletti/shoppingapp:latest
  
  docker login -> need to login to dockerHub

 docker tag 7dd  fgaletti/shoppingapp  --> copy of

 15 automate builds

	automate builds

     - go to docker 

16 DEPLOY TO AZURE

 LOCAL MACHINE ->  AZURE PIPELINE ->   AZ CONTAINER REGISTRY ->  WEB APP FOR CONTAINERS

17 START WITH AZURE SUBSCRIPTION  


18

shoppingappk8 -> web app


20. CI/CD FOR SINGLE CONTAINER

 webhook - dockerhub -_ continuous deployment


26 SET LAUNCH SETTING AND PORT NUMBERS DEFINED FOR SHOPPING

*** Client Application -> change PROFILE FROM (DOCKER) -> Shopping.Client

   --> SERT UP; http://localhost:5001

   ** GO TO SOLUTION -> MULTIPLE STARTUP
      -> set 2 applicatrions 
  

28  CONSUME SHOPPING.API FROM Shooping.client MICROSERVICE
   _httpClient = httpClientFactory.CreateClient("ShoppingApiClient");

  Shooping.client -> calls -> SHOPPING.API 

29 SET UP MONGO DOCKER


 MONGODB docker

 docker pull mongo

https://hub.docker.com/_mongo

 docker run -d -p 27017:27017 --name shopping-mongo mongo

 docker logs -f shopping-mongo

 docker exec -it shopping-mongo /bin/bash  ???

30 INTERACTIVE TERMINAL FOR MONGODB

  -- OPEN POWERSHELL IN VISUAL STUIDO


31 COMMAND

docker exec -it shopping-mongo /bin/bash

mongo
   -> show dbs

 use CatalogDb
switched to db CatalogDb
> db.createCollection('Products')


db.Products.insertMany([{'Name': 'Asus Laptop', 'Category':'Computers', 'Summary': 'Summary', 'Description': 'Description', 'Imagefile': 'Imagefile', 'Price': '54.00'},
{'Name': 'HP Laptop', 'Category':'Computers', 'Summary': 'Summary', 'Description': 'Description', 'Imagefile': 'Imagefile', 'Price': '88.00'} ] )


db.Products.find({}).pretty()

show databases


31 CONNECT MONGO DOCHJER CONTAINER FROM SHOPING.API MICROSERVICE

   modify product class

32 ONNECT MONGO DOCHJER CONTAINER FROM SHOPING.API MICROSERVICE 2

 modify CONTEXT  -> ProductContext

  2. add service -> dependency Injection
  3. add to ProductController -> datacontext 


mongodb://127.0.0.1:27107
  

35 ADDING DOCKER-COMPOSE FILE FOR SHOPPING MICXROSERVICES

  -> Right click on the project -> Container Orchestration Support -> docker compose -> linux

  docker-compose: defines all the services to be deployed un the moment , and rely on a docker file or existing container.


  - Add the other project to Docker Orachestration




36 ADDING MONGODB into DOCKER-COMPOSE FILE

    shopping.db:
    container_name: shoppingdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ${WEBAPP_STORAGE_HOME}/site:/data/db  

37 RUN MULTI-CONTAINER APPLICATION WITH DOCKER COMPOSE

  --1. STEP : SET DOCKER COMPOSE AS STARTUP PROJECT

 run docker compose

 container: dev = debug mode

38 EXCEPTIONS FIXES ON RUNNING DOCKER COMPOSE

  Override applications settings -> in docker compose

     Error DATABASE NAME 
 
 2.Error in PORT (Client)
   -is looking for PORT 5000 , now it should be 

 shopping.client:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "ShoopingAPIUrl=http://shoppingapi"  -> container name


    ** recreate images because we changed the code

   *richt click on docker compose
	-> powershell
	   -> remove all containers: 
		docker ps -aq
		docker stop $(docker ps -aq)

         --- delete images

               docker rm $(docker ps -aq)

               docker rmi $(docker images -q)

          docker system prune   : remove all stopped containers
					 all networks not used
  
          docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d  --> run all containers in background

       docker-compose -f docker-compose.yml -f docker-compose.override.yml up -down -> stop all containers



39 COMMANDS

  examples:
  docker run -d --name=my-mongo -p 5672:5672 mongo 

 docker pull mongo
  docker build 
   docker run  

  docker-compose up
   docker-compose -f docker-compose.yaml -f 

-------------------------------------------------------
40 KUBERNETES

44 LOCAL INSTALLMENT

  GO TO DOCKER 
      -> settings -> check install kubernetes

  kubectl get all


45 KUBER COMMANDS

  kubectl  get nodes / pod / service / all

 kubectl  create / edit / delete

 http:
 
 


